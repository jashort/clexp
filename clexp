#!/usr/bin/env python
import datetime
import sys
import os
import argparse

from ExpenseList import ExpenseList
from Expense import Expense


def add_expense(args):
    """
    Add expense to the data file
    @param args: Command Line Arguments
    """
    try:
        e = Expense(args.amount, args.category, args.description, args.date)
    except ValueError:
        print("Error: unable to parse input as expense.")
        print("          Amount: {}".format(args.amount))
        print("        Category: {}".format(args.category))
        print("     Description: {}".format(args.description))
        print("            Date: {}".format(args.date))
        exit(1)

    # Also add_expense a header row if the file doesn't exist
    header = None
    if not os.path.isfile(args.file):
        header = "Date\tCategory\tDescription\tAmount\n"

    with open(args.file, 'a') as f:
        if header is not None:
            f.write(header)
        f.write(str(e))
        f.write("\n")
    print("Added:")
    print(str(e))


def total_expenses(args):
    """
    Print the total_expenses amount spent in the given time period
    """
    expenses = load_data(args.file)
    if args.year is not None and args.month is not None and args.category is not None:
        print("Total spent in {}/{} on {}: ${:8,.2f}".format(args.month, args.year, args.category,
                                                             expenses.get_total(args.year,
                                                                                args.month,
                                                                                args.category)))
    elif args.year is not None and args.month is not None:
        print("Total spent in {}/{}: ${:8,.2f}".format(args.month,
                                                       args.year,
                                                       expenses.get_total(args.year,
                                                                          args.month,
                                                                          args.category)))
    elif args.year is not None:
        print("Total spent in {}: ${:8,.2f}".format(args.year,
                                                    expenses.get_total(args.year,
                                                                       args.month,
                                                                       args.category)))
    else:
        print("Total spent: ${:8,.2f}".format(expenses.get_total(args.year,
                                                                 args.month,
                                                                 args.category)))


def list_expenses(args):
    """
    Print all expenses in the given time period
    """
    expenses = load_data(args.file)
    items = list(expenses.get_expenses(args.year, args.month, args.category))
    for item in sorted(items, key=lambda expense: expense.date):
        print(item)


def list_totals(args):
    """
    Print the total from every month
    """
    expenses = load_data(args.file)
    totals = expenses.get_month_totals()
    print("Total Spent:")
    for month, amount in totals:
        print("  {}: ${:8,.2f}".format(month.strftime("%m/%Y"), amount))


def list_categories(args):
    """
    Print all the currently used categories
    """
    expenses = load_data(args.file)
    print('Categories:')
    for category in sorted(expenses.categories):
        print("  {}".format(category))


def summary(args):
    """
    Print a summary of the current month
    """
    expenses = load_data(args.file)
    today = datetime.datetime.now()
    last_month = today.replace(day=1) - datetime.timedelta(days=1)
    last_year = today.replace(day=1) - datetime.timedelta(days=365)
    print("Total spent:")
    print("             This month: ${:8,.2f}".format(expenses.get_total(today.year, today.month)))
    print("             Last month: ${:8,.2f}".format(expenses.get_total(last_month.year, last_month.month)))
    print("   This month last year: ${:8,.2f}".format(expenses.get_total(last_year.year, last_year.month)))
    print(" ")
    print("Average spent per day: ")
    print("             This month: ${:8,.2f}".format(expenses.get_average_per_day(today.year, today.month)))
    print("             Last month: ${:8,.2f}".format(expenses.get_average_per_day(last_month.year, last_month.month)))
    print("   This month last year: ${:8,.2f}".format(expenses.get_average_per_day(last_year.year, last_year.month)))
    print(" ")

    return True


def plot(args):
    """
    Plot totals with MatPlotLib
    """
    try:
        import matplotlib.pyplot
        import matplotlib.dates
    except ImportError:
        print('Error importing matplotlib')
        exit(1)
    # Load data
    expenses = load_data(args.file)
    data = expenses.get_month_totals()
    dates = [q[0] for q in data]
    totals = [q[1] for q in data]
    my_plot = matplotlib.pyplot
    my_plot.title('Money Spent')
    my_plot.ylabel('Amount')
    my_plot.xlabel('Month')
    my_plot.gca().xaxis.set_major_formatter(matplotlib.dates.DateFormatter('%b %Y'))
    my_plot.gca().xaxis.set_major_locator(matplotlib.dates.MonthLocator(range(1, 13), bymonthday=1, interval=3))
    my_plot.gca().xaxis.set_minor_locator(matplotlib.dates.MonthLocator(range(1, 13), bymonthday=1, interval=1))
    my_plot.gca().grid(True, 'major')
    my_plot.gca().grid(True, 'minor')
    my_plot.gca().grid(True)

    my_plot.plot(dates, totals, label='Total', linewidth=3)
    my_plot.gcf().autofmt_xdate()
    my_plot.xticks(rotation=45)
    my_plot.fill_between(dates, totals, [0]*len(data), facecolor='blue', alpha=0.2)
    my_plot.show()


def details(args):
    """
    List totals for each category for the given time period
    """
    expenses = load_data(args.file)
    if args.year is not None and args.month is not None:
        print("Amount spent in {}/{}:".format(args.month, args.year))
        for category in expenses.categories:
            print("\t{:20} ${:10,.2f}".format(category, expenses.get_total(args.year,
                                                                        args.month,
                                                                        category)))
    elif args.year is not None:
        print("Amount spent in {}:".format(args.year))
        for category in expenses.categories:
            print("\t{:20} ${:10,.2f}".format(category, expenses.get_total(args.year, category=category)))
    else:
        print("Amount spent:".format(args.month, args.year))
        for category in expenses.categories:
            print("\t{:20} ${:10,.2f}".format(category, expenses.get_total(category=category)))

    print(" ")
    print("\t{:20} ${:10,.2f}".format('Total:', expenses.get_total(args.year, args.month)))


def load_data(filename):
    """
    Load data from the given filename, returns ExpenseList object
    """
    expenses = ExpenseList()

    try:
        with open(filename) as f:
            f.readline()    # skip header row
            for line in f:
                if line.strip() != "":
                    line = line.strip().split("\t")
                    # Note - file is stored date, category, description, amount
                    # but add_expense is expecting amount first and date last
                    # (because date is optional)
                    line[0], line[3] = line[3], line[0]
                    expenses.add_expense(line)
        return expenses
    except IOError:
        print("Error: couldn't open data file {0}".format(filename))
        sys.exit(1)


def initialize_storage(storage_dir):
    """
    Create storage directory if it doesn't exist
    """
    if not os.path.exists(storage_dir):
#        try:
            os.mkdir(storage_dir, 700)
#        except OSError:
#            print("Error: couldn't create storage directory {0}".format(storage_dir))



def main():
    """
    Parse command line arguments for command and run the appropriate function
    """
    parser = argparse.ArgumentParser(description='Track expenses from the command line')
    # Parser for file argument
    parser.add_argument("-f", "--file", help="Data File", default="~/.clexp/data.csv")
    subparsers = parser.add_subparsers(help='')
    # Parser for add command
    a_add = subparsers.add_parser('add', help='Add Expense')
    a_add.add_argument('amount', type=str, help='Dollar amount or formula')
    a_add.add_argument('category', type=str, help='Category')
    a_add.add_argument('description', type=str, help='Description')
    a_add.add_argument('date', nargs='?', type=str, default=None,
                       help="Date in MM/DD/YYYY format (default: today's date)")
    a_add.set_defaults(func=add_expense)
    # Parser for list command
    a_list = subparsers.add_parser('list', help='List Expenses')
    a_list.add_argument('year', type=int, default=None, nargs='?', help="Year (optional)")
    a_list.add_argument('month', type=int, default=None, nargs='?', help="Month (optional)")
    a_list.add_argument('category', default=None, nargs='?', help='Category (optional)')
    a_list.set_defaults(func=list_expenses)
    # Parser for expenses command
    a_total = subparsers.add_parser('total', help='Show total amount of matching expenses')
    a_total.add_argument('year', type=int, default=None, nargs='?', help="Year (optional)")
    a_total.add_argument('month', type=int, default=None, nargs='?', help="Month (1 - 12, optional)")
    a_total.add_argument('category', type=str, default=None, nargs='?', help='Category (optional)')
    a_total.set_defaults(func=total_expenses)
    # Parser for summary command
    a_summary = subparsers.add_parser('summary', help='Show summary of current and previous months')
    a_summary.set_defaults(func=summary)
    # Parser for totals command
    a_list_totals = subparsers.add_parser('totals', help='List monthly totals')
    a_list_totals.set_defaults(func=list_totals)
    # Parser for categories command
    a_categories = subparsers.add_parser('categories', help='Show all categories currently used')
    a_categories.set_defaults(func=list_categories)
    # Parser for plot command
    a_plot = subparsers.add_parser('plot', help='Plot totals with MathPlotLib')
    a_plot.set_defaults(func=plot)
    # Parser for details command
    a_details = subparsers.add_parser('detail', help='Show totals of each category for the given time period')
    a_details.add_argument('year', type=int, default=None, nargs='?', help="Year (optional)")
    a_details.add_argument('month', type=int, default=None, nargs='?', help="Month (optional)")
    a_details.set_defaults(func=details)

    args = parser.parse_args()
    initialize_storage('~/.clexp')
    args.func(args)
    return 0


if __name__ == "__main__":
    sys.exit(main())

